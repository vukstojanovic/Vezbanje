import Head from "next/head";
import { useGetUsersQuery, getUsers } from "../services/getData";
import styles from "../styles/Home.module.css";
import SingleUser from "../components/SingleUser";
import { useState } from "react";
import { usePostUserMutation } from "../services/postData";
import { QueryClient, dehydrate } from "@tanstack/react-query";

export default function Home() {
  const { data, isLoading, isError, error } = useGetUsersQuery();
  const [userName, setUserName] = useState("");
  const [userDescription, setUserDescription] = useState("");
  const mutationPostUser = usePostUserMutation();

  if (isLoading) {
    return <h1>Loading...</h1>;
  }

  if (isError) {
    return <h1>{error.message}</h1>;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="users">
        {data &&
          data.data.map((user) => {
            const { name, description, id } = user;
            return (
              <SingleUser key={id} name={name} description={description} />
            );
          })}
        <div className="input-fields">
          <p>
            <label htmlFor="name">User name: </label>
            <input
              id="name"
              type="text"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
            />
          </p>
          <p>
            <label htmlFor="description">User description: </label>
            <input
              id="description"
              type="text"
              value={userDescription}
              onChange={(e) => setUserDescription(e.target.value)}
            />
          </p>
          <button
            onClick={() =>
              mutationPostUser.mutate({
                name: userName,
                description: userDescription,
              })
            }
          >
            Add a new user
          </button>
        </div>
      </div>
    </div>
  );
}

export async function getStaticProps() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery("users", getUsers);

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}
